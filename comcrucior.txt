{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"Atmotank_Mitte","type":{"events":[],"methods":[]}},"2":{"name":"Atmotank_Links","type":{"events":[],"methods":[]}},"3":{"name":"Spacetank_Oben","type":{"events":[],"methods":[]}},"4":{"name":"Spacetank_Vorne","type":{"events":[],"methods":[]}},"5":{"name":"spacefueltank_2","type":{"events":[],"methods":[]}},"6":{"name":"spacefueltank_3","type":{"events":[],"methods":[]}},"7":{"name":"engine3","type":{"events":[],"methods":[]}},"8":{"name":"engine2","type":{"events":[],"methods":[]}},"9":{"name":"engine1","type":{"events":[],"methods":[]}},"10":{"name":"slot11","type":{"events":[],"methods":[]}},"11":{"name":"slot12","type":{"events":[],"methods":[]}},"12":{"name":"slot13","type":{"events":[],"methods":[]}},"13":{"name":"slot14","type":{"events":[],"methods":[]}},"14":{"name":"slot15","type":{"events":[],"methods":[]}},"15":{"name":"slot16","type":{"events":[],"methods":[]}},"16":{"name":"slot17","type":{"events":[],"methods":[]}},"17":{"name":"slot18","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"radar","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"system.showScreen(0)","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"0"},{"code":"do\n    -- Set GC pause. This more or less means by how many % memory use should increase before a garbage collection is started. Lua default is 200\n    local newPause = 110\n    local oldPause = collectgarbage(\"setpause\", newPause)\n    \n    if oldPause < newPause then\n        -- DU now has a different default GC pause which is even lower. Revert back to it.\n        collectgarbage(\"setpause\", oldPause)\n    end\nend\nNav = Navigator.new(system, core, unit)\nheight = 20 --export height\nNav.axisCommandManager:setTargetGroundAltitude(height)\n\ncore.hide()\nunit.hide()\nthrottle = 0\nthrottle_alt = 0\natmo_mode = 0\nbrake_toggle = 1 --export\nbrakeInput = 0\nbrake_alt = 0\nparentingPanelId = system.createWidgetPanel(\"Docking\")\nparentingWidgetId = system.createWidget(parentingPanelId,\"parenting\")\nsystem.addDataToWidget(unit.getDataId(),parentingWidgetId)\n\nfunction update_throttle()\n    throttle = Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)\n    if throttle_alt ~= throttle then\n        update_throttle_string(throttle)\n        throttle_alt = throttle\n    end\nend\n\nfunction update_brake()\n    if brake_alt ~= brakeInput then\n        update_brake_string()\n        brake_alt = brakeInput\n    end\nend\n\nif antigrav ~= nil then antigrav.show() end\nif warpdrive ~= nil then warpdrive.show() end\nif gyro ~= nil then gyro.show() end\nif shield ~= nil then shield.show() end","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"if brakeInput == 1 then \n    if opacity_warning >= 1 then \n    \treverse_uno = 1\n    elseif opacity_warning <= 0.3 then \n    \treverse_uno = 0 \n    end\n                \n    if reverse_uno == 1 then\n        opacity_warning = opacity_warning - blink_factor\n    else\n        opacity_warning = opacity_warning + blink_factor\n    end\nend\n\n","filter":{"args":[{"value":"warning"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"pcall(tanksfunction)\n\n--increasing counter each tick\ndisplay_counter = (display_counter%value_amount)+1\n\n--calculating values\nvelocity_mag = (vec3(velocity):len()*3.6)\nacceleration_mag = (vec3(acceleration):len()/9.91)\n\n--writing current values\nacceleration_avg[display_counter] = acceleration_mag\nvelocity_avg[display_counter] = velocity_mag\nif statistic_show == 1 then \n\tstatistic()\nend\nvelocity = 0\nacceleration = 0\n\nj=1\nwhile j<=value_amount do\n    acceleration = acceleration + acceleration_avg[j]\n    velocity = velocity + velocity_avg[j]\n    j = j+1\nend\nacceleration = string.format(\"%.2f\" , (acceleration/value_amount))\nvelocity = string.format(\"%.0f\" , (velocity/value_amount))\n\nsystem.setScreen(\n[[\n    <style>\n           svg {\n                position: absolute;\n                top:0;\n                left:0;\n        } \n          .custom_ui_panel {\n                position: absolute;\n                display: block;\n                margin: 0;\n                box-sizing: border-box;\n    \t\t  z-index: -1;\n                padding-top: 0.2666vh;\n    \t\t  padding-right: 0.4vw;\n    \t\t  padding-bottom: 0.444vh;\n    \t   \t  padding-left: 0.4vw;\n                border: 0.2666vh solid grey;\n        \t   border-radius: 0.7111vh;\n        \t   background-color: #262626aa;\n        \t   box-shadow: 0vw 0vw 0vw 0.15vw rgba(0, 0, 0, 0.6);\n        }\n\t\t\t.scorediv {\n        \t\ttop: 74vh;\n        \t\tleft: 70vw;\n        \t\twidth: 10.8vw;\n        \t\theight: 2.65vh;\n        \t\tposition: fixed;\n        }\n        \n        \t  .checkpointdiv {\n        \t\tposition: fixed;\n                  display: block;\n                  margin: 0;\n                  padding-top: 0vw;\n                  padding-right: 0vw;\n                  padding-bottom: 0vw;\n                  padding-left: 0vw;\n                  box-sizing: border-box;\n                  z-index: -1;\n                  border: 0.0vw solid grey;\n                  border-radius: 0.444vh;\n                  background-color: #30ccfbff;\n        \t\ttop: 2.7vh;\n                  left: 6.75vw;\n        \t\twidth: 0.90vw;\n        \t\theight: 1.7vh;\n        }\n    \t\t.checkpointdiv2 {\n        \t\tposition: fixed;\n                  display: block;\n                  margin: 0;\n                  padding-top: 0vw;\n                  padding-right: 0vw;\n                  padding-bottom: 0vw;\n                  padding-left: 0vw;\n                  box-sizing: border-box;\n                  z-index: -1;\n                  border: 0.0vw solid grey;\n                  border-radius: 0.444vh;\n                  background-color: #30ccfbff;\n        \t\ttop: 2.7vh;\n                  left: 6.75vw;\n        \t\twidth: 1.93vw;\n        \t\theight: 1.7vh;\n        }\n                .my_div3 {\n                    top: 65vh;\n                    left: 70vw;\n    \t\t\t position: fixed;\n                    font-size: 2.133vh;\n        \t\t  color:#30ccfb;\n        }\n    \t\t  .warning {\n    \t\t\t top: 3vh;\n                    left: 50%;\n                    transform: translate(-50%, -0%);\n    \t\t\t position: absolute;\n                    font-size: 3.555vh;\n        \t\t  color:#de0422;\n    \t\t\t opacity:]]..(opacity_warning)..[[;\n    \t\t\t text-align: center;\n        }\n    \t\t  .my_div4 {\n                    top: 65vh;\n    \t\t\t position: fixed;\n                    font-size: 2.133vh;\n        \t\t  color:#30ccfb;\n        }\n                .warning2 {\n    \t\t\t top: 13.5vh;\n                    left: 50%;\n                    transform: translate(-50%, -0%);\n    \t\t\t position: absolute;\n                    font-size: 3.555vh;\n        \t\t  color:#de0422;\n    \t\t\t opacity:]]..(opacity_warning)..[[;\n    \t\t\t text-align: center;\n        }\n        </style>\n    <div class=\"custom_ui_panel my_div4\" style=\"text-align: right; top: 84vh; left: 35.35vw; width: 10.8vw; color: #30ccfb;\">]]..(velocity)..[[km/h</div>\n    <div class=\"custom_ui_panel my_div4\" style=\"text-align: left; top: 80vh; left: 35.35vw; color: #ff4522;\">Speed</div>\n    <div class=\"custom_ui_panel my_div4\" style=\"text-align: right; top: 84vh; left: 26.2vw; width: 8.4vw; color: #30ccfb;\">]]..(acceleration)..[[g</div>\n    <div class=\"custom_ui_panel my_div4\" style=\"text-align: left; top: 80vh; left: 26.2vw; color: #ff4522;\">Acceleration</div>\n    <div class=\"custom_ui_panel my_div3\" style=\"top: 90vh; left: 50vw; color: #37b9c8; transform: translate(-50%, -0%);\">Atmo Main</div>\n    <div class=\"custom_ui_panel scorediv\" style=\"top: 94vh; width: 10.85vw; left:44.6vw;\"></div>\n    ]]..create_tank_string(\"checkpointdiv\", checkVisDistance, 50.105 , 94.5, ((atmodata_array[2]/2)/atmodata_array[1]) ,\"37b9c8\", \"right\")..[[\n    ]]..create_tank_string(\"checkpointdiv\", checkVisDistance, 50.105-checkVisDistance , 94.5, ((atmodata_array[2]/2)/atmodata_array[1]) ,\"37b9c8\" , \"left\")..[[]]\n    ..brake_string..accel_statistics_string..veloc_statistics_string..throttle_string..graph_base_string..atmo_string\n)","filter":{"args":[{"value":"UI"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"\nquat= require(\"cpml/quat\")\nmat4= require(\"cpml/mat4\")\njson = require(\"dkjson\")\nvec2 = require(\"cpml/vec2\")\nvec3 = require(\"cpml/vec3\") \ncolor = \"#49cd24\"\n--Initialise Tanks\natmofueltank = {}\natmofueltank[1] = Atmotank_Mitte\natmofueltank_size = 1\n\nspacefueltank = {}\nspacefueltank_size = 0\n\natmodata_array = {}\nspacedata_array = {}\nspaceutildata_array = {}\n\n\n--Initialise UI\nresolutionWidth = system.getScreenWidth() \t--export \nresolutionHeight = system.getScreenHeight() \t--export\nvw = resolutionWidth/100\nvh = resolutionHeight/100\n\nclassicHUD = 0 --export\nshowBuildHelper = 0 --export\nsystem.showHelper(showBuildHelper)\n\nsystem.print(\"Enter 'help' for an explanation of the script.\")\n\nopacity_warning = 1\t\t\t--initialise opacity for warning\nreverse_uno = 1    \nblink_factor = 0.04\nbrake_string = \"\"\nbrake_buffer = \"\"\natmo_string = \"\"\nbrake_display = 0\nstatistic_show  = 0\nveloc_statistics_string = \"\"\naccel_statistics_string = \"\"\ngraph_base_string = \"\"\nthrottle = 0\nlisten = 0\nthrottle_string = \"\"\n\n--update_throttle_string(throttle)\ncheckVisDistance = 1.04333\t --distanz zwischen Checkpointsymbole im HUD\nsystem.showScreen(1)\ndisplay_UI = 1\nunit.setTimer(\"warning\", 0.03)\nunit.setTimer(\"UI\", 0.05)\n\n--Tankfunction for percentages\nfunction tank(tank_size, tank, data_array, String)\n    j = 1\n    while j<=tank_size do\n        e = json.decode(tank[j].getData())\n        if e[\"name\"] == String then \n            data_array[1] = data_array[1] + 1\n            data_array[2] = data_array[2] + e[\"percentage\"] \n        end\n        j=j+1\n    end\n    \nend\n\nfunction tanksfunction()\n    tank(atmofueltank_size, atmofueltank, atmodata_array,\"AtmoMain\")\n    tank(spacefueltank_size, spacefueltank, spacedata_array, \"SpaceMain\")\n    tank(spacefueltank_size, spacefueltank, spaceutildata_array, \"SpaceUtil\")\nend\n\n--create the tank_strings\nfunction create_tank_string(whichdiv,checkVisDistance, check_left, check_top, tank_percentage, color, direction)\n    local tank_pip_count = math.floor(tank_percentage/10)\n    if direction == \"left\" then \n        checkDis = -checkVisDistance \n    else \n        checkDis = checkVisDistance \n    end\n    \n    local opacity = (tank_percentage-(tank_pip_count*10))/10\n    local tank_string = \"\"\n    j = 0\n    while j<(tank_pip_count) do\n       \ttank_string = tank_string..[[<div class=\"]]..whichdiv..[[\" style=\"left: ]]..(check_left+(checkDis*j))..[[vw; top:]]..check_top..[[vh; background-color: #]]..color..[[; \"></div>]]\n    \tj = j+1\n    end\n    tank_string = tank_string..[[<div class=\"]]..whichdiv..[[\" style=\"left: ]]..(check_left+(checkDis*j))..[[vw; top:]]..check_top..[[vh; background-color: #]]..color..[[; opacity:]]..opacity..[[;\"></div>]]\n    \n    return tank_string\t\nend\n\n--Initialise statistics\nacceleration_avg = {}\nvelocity_avg = {}\nacceleration_statistic = {}\nvelocity_statistic = {}\nvalue_amount = 4\nstatistic_amount = 100\ndisplay_counter = 0\nstatistic_counter = 0\n\n--Initialise statistic tables\nj=1\nwhile j<=value_amount do\n    velocity_avg[j] = 0\n    acceleration_avg[j] = 0\n    j=j+1\nend\n\nj=1\nwhile j<=statistic_amount do\n    acceleration_statistic[j] = 0\n    velocity_statistic[j] = 0\n    j=j+1\nend\n\n--Initialise Framecounter\nexecuteSet = 0\nexecuteTime = 0\nfunction frames()\n    executeSet = executeSet +1\n    local currTime = system.getTime()\n    if (currTime-executeTime) > 1 then\n        executeLastFrames = executeSet\n        executeSet = 1\n        executeTime = currTime\n        system.print(\"Frames: \"..executeLastFrames)\t       \n    end\nend\n\n--Initialise values for graph position\nstatistic_axis_margin = 1.2\nstatistic_top_margin = 3\nstatistic_bottom_margin = 3 \nstatistic_graph_left = 1 --export\nstatistic_graph_top = 7.9 --export \nstatistic_graph_width = 30 --export\nstatistic_graph_height = 20 --export\n\n--Offsets for the graph inside the graphbox\nstatistic_left_offset = statistic_graph_left+statistic_axis_margin\nstatistic_right_offset = statistic_left_offset+statistic_graph_width- 2*statistic_axis_margin\nstatistic_top_offset = statistic_graph_top+statistic_top_margin\nstatistic_bottom_offset = statistic_top_offset+statistic_graph_height-(statistic_bottom_margin)-statistic_top_margin+1\n\n--distance for points\nstatistic_point_distance = (statistic_right_offset-statistic_left_offset)/(statistic_amount - 1)\nstatistic_actual_height = statistic_bottom_offset-statistic_top_offset\n \n--statistics graph calculation\nfunction statistic()\n   \n    --writing current values\n    statistic_counter = (statistic_counter%statistic_amount)+1\n    acceleration_statistic[statistic_counter] = acceleration_mag\n    velocity_statistic[statistic_counter] = velocity_mag\n    --maxvalue of statistics for graph scaling\n    maxvalue_veloc = velocity_statistic[1]\n    maxvalue_accel = acceleration_statistic[1]\n    \n    j = 2\n    while j<=statistic_amount do\n        if maxvalue_veloc <= velocity_statistic[j] then\n            maxvalue_veloc = velocity_statistic[j]\n        end\n        if maxvalue_accel<=acceleration_statistic[j] then\n            maxvalue_accel = acceleration_statistic[j]\n        end\n        j = j+1\n    end  \n    \n    scaling_accel = 1\n    if maxvalue_accel>=1 then scaling_accel = 5 end\n    if maxvalue_accel>=5 then scaling_accel = 10 end\n    if maxvalue_accel>=10 then scaling_accel = 20 end\n    if maxvalue_accel>=20 then scaling_accel = 40 end\n    if maxvalue_accel>=40 then scaling_accel = 80 end\n    scaling_veloc = 1000\n    if maxvalue_veloc>=1000 then scaling_veloc = 5000 end\n    if maxvalue_veloc>=5000 then scaling_veloc = 10000 end\n    if maxvalue_veloc>=10000 then scaling_veloc = 20000 end\n    if maxvalue_veloc>=20000 then scaling_veloc = 30000 end\n    if maxvalue_veloc>=30000 then scaling_veloc = 1000000 end\n    \n    velocity_pip = statistic_actual_height/scaling_veloc\n    accel_pip = statistic_actual_height/scaling_accel\n    \n    oldest_value = (statistic_counter%statistic_amount)+1\n    \n    accel_statistics_string = graph_string(acceleration_statistic, statistic_amount, oldest_value, accel_pip, statistic_point_distance, statistic_left_offset, statistic_bottom_offset, \"#ff0000\")\n    veloc_statistics_string = graph_string(velocity_statistic, statistic_amount, oldest_value, velocity_pip, statistic_point_distance, statistic_left_offset, statistic_bottom_offset, \"#ffe135\")\n    graph_base_string = [[\n    <div class=\"custom_ui_panel\" style=\"top: ]]..(statistic_graph_top)..[[vh; left: ]]..(statistic_graph_left)..[[vw; width: ]]..(statistic_graph_width)..[[vw; height: ]]..(statistic_graph_height)..[[vh;\"></div>\n    <svg width=\"]]..resolutionWidth..[[\" height=\"]]..resolutionHeight..[[\" opacity=1\">\n    <style>\n            .small { \n    \t\tfont: bold ]]..(vh*2)..[[px Bank ;\n    \t\tfill: #ff0000;}\n    \t   .smol{ \n    \t\tfont: bold ]]..(vh*2)..[[px Bank ;\n    \t\tfill: #ffe135;}\n    </style>\n    <text text-anchor=\"end\" x=\"]]..((statistic_right_offset+0.8)*vw)..[[\" y=\"]]..((statistic_top_offset -0.7 )*vh)..[[\" class=\"smol\">]]..(scaling_veloc)..[[kmh</text>\n    <text text-anchor=\"start\" x=\"]]..((statistic_left_offset- 1.2 -(0.01*vh)+statistic_graph_width*0.020)*vw)..[[\" y=\"]]..((statistic_top_offset -0.7 )*vh)..[[\" class=\"small\">]]..(scaling_accel)..[[g</text>\n    <path d=\"\n    \tM ]]..(statistic_left_offset*vw)..[[,]]..(statistic_top_offset*vh)..[[\n       \tL ]]..(statistic_left_offset*vw)..[[,]]..(statistic_bottom_offset*vh)..[[\n      \t\"\n         fill=\"#000000\" fill-opacity=\"0\" stroke=\"#ff0000\" stroke-width=\"]]..(0.1*vw)..[[\"/>\n    <path d=\"\n    \tM ]]..(statistic_left_offset*vw)..[[,]]..(statistic_top_offset*vh)..[[\n       \tL ]]..(statistic_left_offset*vw)..[[,]]..(statistic_top_offset*vh)..[[\n      \t\"\n         fill=\"#000000\" fill-opacity=\"0\" stroke=\"#ff0000\" stroke-width=\"]]..(0.1*vw)..[[\"/>\n    \n    <path d=\"\n    \tM ]]..(statistic_right_offset*vw)..[[,]]..(statistic_top_offset*vh)..[[\n       \tL ]]..(statistic_right_offset*vw)..[[,]]..(statistic_bottom_offset*vh)..[[\n      \t\"\n         fill=\"#000000\" fill-opacity=\"0\" stroke=\"#ffe135\" stroke-width=\"]]..(0.1*vw)..[[\"/>\n\t</svg>]]\nend\n\nfunction graph_string(statistics_table, statistic_amount, oldest_value, pip, statistic_point_distance, statistic_left_offset, statistic_bottom_offset, color)\n    \n    local statistics_string = [[\n        <svg width=\"]]..resolutionWidth..[[\" height=\"]]..resolutionHeight..[[\" opacity=1\">\n        <path d=\" M ]]..(statistic_left_offset*vw)..[[,]]..((statistic_bottom_offset-(pip*statistics_table[oldest_value]))*vh)\n\n    j = 1\n    local current_value = oldest_value\n    while j<statistic_amount do\n        current_value = (current_value%statistic_amount)+1\n        statistics_string = statistics_string..[[\n                L ]]..((statistic_left_offset+(j*statistic_point_distance))*vw)..[[,\n                ]]..((statistic_bottom_offset-(pip*statistics_table[current_value]))*vh)..[[]]\n    \tj=j+1\n    end\n    statistics_string = statistics_string..[[\"fill=\"#000000\" fill-opacity=\"0\" stroke=\"]]..(color)..[[\" stroke-width=\"]]..(0.1*vw)..[[\"/></svg>]]\n    return statistics_string\nend\n\natmo_color_1 = \"#00bbff\" --export Atmoonly color as base\natmo_color_2 = \"#f98a14\" --export Space color as addition\n\nhud_lines = [[\n\n   <svg width=\"]]..resolutionWidth..[[\" height=\"]]..resolutionHeight..[[\">\n<path d=\"\n       M ]]..(22.9*vw)..[[,]]..(-1.3*vh)..[[\n       L ]]..(28.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(34.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(40*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(60*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(71.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(77.1*vw)..[[,]]..(-1.3*vh)..[[\n       \"\n        fill=\"#000000\" fill-opacity=\"0\" id=\"svg_5\" stroke=\"#000000\" stroke-width=\"]]..(0.6*vw)..[[\"/>\n\n<path d=\"\n       M ]]..(23.9*vw)..[[,]]..(-0.3*vh)..[[\n       L ]]..(28.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(34.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(40*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(60*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(71.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(76.1*vw)..[[,]]..(-0.3*vh)..[[\n\n       \"\n       fill=\"#000000\" fill-opacity=\"0\" stroke=\"]]..atmo_color_1..[[\" stroke-width=\"]]..(0.4*vw)..[[\"/>\n\n<path d=\"\n       M ]]..(23.9*vw)..[[,]]..(-0.3*vh)..[[\n       L ]]..(28.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(34.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(40*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(60*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(71.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(76.1*vw)..[[,]]..(-0.3*vh)..[[\n\n       \"\n       fill=\"#000000\" fill-opacity=\"0\" stroke=\"]]..atmo_color_2..[[\" stroke-width=\"]]..(0.2*vw)..[[\"/>\n</svg>\n]]\n\nhud_lines2 = [[\n\n   <svg width=\"]]..resolutionWidth..[[\" height=\"]]..resolutionHeight..[[\">\n<path d=\"\n       M ]]..(22.9*vw)..[[,]]..(-1.3*vh)..[[\n       L ]]..(28.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(34.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(40*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(60*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(71.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(77.1*vw)..[[,]]..(-1.3*vh)..[[\n       \"\n        fill=\"#000000\" fill-opacity=\"0\" id=\"svg_5\" stroke=\"#000000\" stroke-width=\"]]..(0.6*vw)..[[\"/>\n\n<path d=\"\n       M ]]..(23.9*vw)..[[,]]..(-0.3*vh)..[[\n       L ]]..(28.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(34.9*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(40*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(60*vw)..[[,]]..(9.7*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(71.1*vw)..[[,]]..(4.7*vh)..[[\n       L ]]..(76.1*vw)..[[,]]..(-0.3*vh)..[[\n\n       \"\n       fill=\"#000000\" fill-opacity=\"0\" stroke=\"]]..atmo_color_1..[[\" stroke-width=\"]]..(0.4*vw)..[[\"/>\n</svg>\n]]\n\nbrek = [[ \n\n<svg width=\"]]..resolutionWidth..[[\" height=\"]]..resolutionHeight..[[\">\n<path d=\"\n       M ]]..(23.9*vw)..[[,]]..(-0.9*vh)..[[\n       L ]]..(28.9*vw)..[[,]]..(4.1*vh)..[[\n       L ]]..(34.9*vw)..[[,]]..(4.1*vh)..[[\n       L ]]..(40*vw)..[[,]]..(9.1*vh)..[[\n       L ]]..(60*vw)..[[,]]..(9.1*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(4.1*vh)..[[\n       L ]]..(71.1*vw)..[[,]]..(4.1*vh)..[[\n       L ]]..(76.1*vw)..[[,]]..(-0.9*vh)..[[\n       \"\n        fill=\"#000000\" fill-opacity=\"0\" id=\"svg_5\" stroke=\"#de0422\" stroke-width=\"]]..(0.4*vw)..[[\"/>\n\n<div class=\"warning custom_ui_panel\">BRAKES ENGAGED!</div>]]\n\n\nbrok = [[\n\n   <svg width=\"]]..resolutionWidth..[[\" height=\"]]..resolutionHeight..[[\">\n\n<path d=\"\n\t  M ]]..(34.9*vw)..[[,]]..(16.1*vh)..[[\n       L ]]..(40*vw)..[[,]]..(11*vh)..[[\n       L ]]..(60*vw)..[[,]]..(11*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(16.1*vh)..[[\n       \n       M ]]..(34.9*vw)..[[,]]..(15.9*vh)..[[\n       L ]]..(40*vw)..[[,]]..(21*vh)..[[\n       L ]]..(60*vw)..[[,]]..(21*vh)..[[\n       L ]]..(65.1*vw)..[[,]]..(15.9*vh)..[[\n       \n       \"\n        fill=\"#000000\" fill-opacity=\"0\" id=\"svg_5\" stroke=\"#000000\" stroke-width=\"]]..(0.3*vw)..[[\"/>\n<path d=\"\n\t  M ]]..(35*vw)..[[,]]..(16*vh)..[[\n       L ]]..(40*vw)..[[,]]..(11*vh)..[[\n       L ]]..(60*vw)..[[,]]..(11*vh)..[[\n       L ]]..(65*vw)..[[,]]..(16*vh)..[[\n\n       M ]]..(35*vw)..[[,]]..(16*vh)..[[\n       L ]]..(40*vw)..[[,]]..(21*vh)..[[\n       L ]]..(60*vw)..[[,]]..(21*vh)..[[\n       L ]]..(65*vw)..[[,]]..(16*vh)..[[\n\n       \"\n       fill=\"#000000\" fill-opacity=\"0\" stroke=\"#de0422\" stroke-width=\"]]..(0.1*vw)..[[\"/>\n\t\t<div class=\"warning2 custom_ui_panel\">BRAKES ENGAGED!</div>\n</svg>\n]]\n\nif classicHUD == 1 then\n    brake_buffer = brok\n    atmo_buffer = \"\"\n    atmo_buffer2 = \"\"\nelse\n    brake_buffer = brek\n    atmo_buffer = hud_lines\n    atmo_buffer2 = hud_lines2\n    atmo_string = hud_lines\nend\n\nfunction update_throttle_string(throttle)\n\tthrottle_string = [[\n    <div class=\"custom_ui_panel my_div4\" style=\"text-align: left; top: 80vh; left: 46.85vw; color: #ff4522;\">Throttle</div>\n    <div class=\"custom_ui_panel scorediv\" style=\"top: 84vh; left: 46.85vw; height:3.45vh; width:20vw\"></div>\n    ]]\n    if tonumber(throttle) < 0 then\n        local throttletwo = -throttle*100\n        throttle_string = throttle_string..create_tank_string(\"checkpointdiv2\", 1.93123, 47.2, 84.84, throttletwo, \"ff2222\", \"right\")\n    else\n        throttle_string = throttle_string..create_tank_string(\"checkpointdiv2\", 1.93123, 47.2, 84.84, throttle*100, \"56fc03\", \"right\") \n    end\nend\nfunction update_brake_string()\n    if brakeInput == 0 then\n        brake_string = \"\"\n    else\n        opacity_warning = 1\n        reverse_uno = 1\n    end\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"4"},{"code":"vec2 = require(\"cpml/vec2\")\npitchInput = 0\nrollInput = 0\nyawInput = 0\npitchSpeedFactor = 1 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nyawSpeedFactor =  3 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nrollSpeedFactor = 1.3 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nbrakeSpeedFactor = 30 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01\nbrakeFlatFactor = 30 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\n\ntorqueFactor = 6 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01\nverticalStrafeEngineTags = 'thrust analog vertical'\nlongitudinalEngineTags = 'thrust analog longitudinal'\nlongitudinalAtmoEngineTags = 'thrust analog longitudinal atmospheric_engine'\nlongitudinalSpaceEngineTags = 'thrust analog longitudinal space_engine'\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"5"},{"code":"-- Axis\nlocal worldVertical = vec3(core.getWorldVertical()) -- along gravity\nlocal constructUp = vec3(core.getConstructWorldOrientationUp())\nlocal constructForward = vec3(core.getConstructWorldOrientationForward())\nlocal constructRight = vec3(core.getConstructWorldOrientationRight())\nlocal constructVelocity = vec3(core.getWorldVelocity())\nlocal constructVelocityDir = vec3(core.getWorldVelocity()):normalize()\nlocal currentRollDeg = getRoll(worldVertical, constructForward, constructRight)\nlocal currentRollDegAbs = math.abs(currentRollDeg)\nlocal currentRollDegSign = utils.sign(currentRollDeg)\n\nlocal constructForwarddeg = constructVelocityDir:angle_between(constructForward:normalize()) * 180 / math.pi\nlocal constructRightdeg = (constructVelocityDir:angle_between(constructRight:normalize()) * 180 / math.pi) - 90\nlocal constructDowndeg = (constructVelocityDir:angle_between(constructUp:normalize()) * 180 / math.pi) - 90\n\nfinalPitchInput = pitchInput\nfinalRollInput = rollInput\nfinalYawInput = yawInput\n\n-- Rotation\nlocal constructAngularVelocity = vec3(core.getWorldAngularVelocity())\nlocal targetAngularVelocity = finalPitchInput *  pitchSpeedFactor * constructRight \n                                + finalRollInput * rollSpeedFactor * constructForward\n                                + finalYawInput *  yawSpeedFactor * constructUp\n-- Engine commands\nlocal keepCollinearity = 0 -- for easier reading\nlocal dontKeepCollinearity = 0 -- for easier reading\nlocal tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities\n\n-- Rotation\nlocal angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)\nlocal airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())\nangularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction                                            \nNav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)\n\n-- Brakes\nlocal constructForward = vec3(core.getConstructWorldOrientationForward())\nlocal constructVelocityDir = vec3(core.getWorldVelocity()):normalize()\n\nlocal brakeAcceleration = -brakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)\nNav:setEngineForceCommand('brake', brakeAcceleration)\n\n\nif atmo_mode == 1 then\n   -- Longitudinal Translation\n\tlocal longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)\n\tNav:setEngineForceCommand(longitudinalAtmoEngineTags, longitudinalAcceleration, keepCollinearity)\n     local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)\n\tNav:setEngineForceCommand(longitudinalSpaceEngineTags, longitudinalAcceleration*0, keepCollinearity)\nelse\n\tlocal longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)\n\tNav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)           \nend\n\n\n\n-- Vertical Translation\nlocal verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)\nNav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)\n\nvelocity = core.getVelocity()\nacceleration = core.getAcceleration()","filter":{"args":[],"signature":"flush()","slotKey":"-2"},"key":"6"},{"code":"Nav:update()\nupdate_throttle()\nupdate_brake()\n\natmodata_array[1] = 0\natmodata_array[2] = 0\nspacedata_array[1] = 0\nspacedata_array[2] = 0\nspaceutildata_array[1] = 0\nspaceutildata_array[2] = 0\n--frames()","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"7"},{"code":"pitchInput = 0","filter":{"args":[{"value":"forward"}],"signature":"actionStop(forward)","slotKey":"-2"},"key":"8"},{"code":"pitchInput = -1","filter":{"args":[{"value":"forward"}],"signature":"actionStart(forward)","slotKey":"-2"},"key":"9"},{"code":"rollInput = -1","filter":{"args":[{"value":"left"}],"signature":"actionStart(left)","slotKey":"-2"},"key":"10"},{"code":"pitchInput = 1","filter":{"args":[{"value":"backward"}],"signature":"actionStart(backward)","slotKey":"-2"},"key":"11"},{"code":"pitchInput = 0","filter":{"args":[{"value":"backward"}],"signature":"actionStop(backward)","slotKey":"-2"},"key":"12"},{"code":"rollInput = 1","filter":{"args":[{"value":"right"}],"signature":"actionStart(right)","slotKey":"-2"},"key":"13"},{"code":"rollInput = 0","filter":{"args":[{"value":"left"}],"signature":"actionStop(left)","slotKey":"-2"},"key":"14"},{"code":"rollInput = 0","filter":{"args":[{"value":"right"}],"signature":"actionStop(right)","slotKey":"-2"},"key":"15"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"up"}],"signature":"actionStop(up)","slotKey":"-2"},"key":"16"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)\n","filter":{"args":[{"value":"up"}],"signature":"actionStart(up)","slotKey":"-2"},"key":"17"},{"code":"Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()\nNav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)\n","filter":{"args":[{"value":"down"}],"signature":"actionStart(down)","slotKey":"-2"},"key":"18"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionStart(groundaltitudeup)","slotKey":"-2"},"key":"19"},{"code":"Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)\nNav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)\n","filter":{"args":[{"value":"down"}],"signature":"actionStop(down)","slotKey":"-2"},"key":"20"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionStart(groundaltitudedown)","slotKey":"-2"},"key":"21"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionLoop(groundaltitudeup)","slotKey":"-2"},"key":"22"},{"code":"yawInput = -1","filter":{"args":[{"value":"yawright"}],"signature":"actionStart(yawright)","slotKey":"-2"},"key":"23"},{"code":"yawInput = 0","filter":{"args":[{"value":"yawright"}],"signature":"actionStop(yawright)","slotKey":"-2"},"key":"24"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionLoop(groundaltitudedown)","slotKey":"-2"},"key":"25"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)\n","filter":{"args":[{"value":"speeddown"}],"signature":"actionStart(speeddown)","slotKey":"-2"},"key":"26"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)","filter":{"args":[{"value":"speeddown"}],"signature":"actionLoop(speeddown)","slotKey":"-2"},"key":"27"},{"code":"if brake_toggle == 1 then   \n    if brakeInput == 1 then\n        brakeInput = 0\n        brake_string = \"\"\n    else\n        brakeInput = 1\n        brake_string = brake_buffer\n    local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\n        if (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n            local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n            if (math.abs(targetSpeed) > constants.epsilon) then\n                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n            end\n        end \n    end\nelse\n    brakeInput = 1\n    brake_string = brake_buffer\n    local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\n        if (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n            local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n            if (math.abs(targetSpeed) > constants.epsilon) then\n                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n            end\n\tend\nend","filter":{"args":[{"value":"brake"}],"signature":"actionStart(brake)","slotKey":"-2"},"key":"28"},{"code":"yawInput = 1","filter":{"args":[{"value":"yawleft"}],"signature":"actionStart(yawleft)","slotKey":"-2"},"key":"29"},{"code":"yawInput = 0","filter":{"args":[{"value":"yawleft"}],"signature":"actionStop(yawleft)","slotKey":"-2"},"key":"30"},{"code":"local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end \nend\n","filter":{"args":[{"value":"brake"}],"signature":"actionLoop(brake)","slotKey":"-2"},"key":"31"},{"code":"Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)\nthrottleLul = 0","filter":{"args":[{"value":"stopengines"}],"signature":"actionStart(stopengines)","slotKey":"-2"},"key":"32"},{"code":"Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)","filter":{"args":[{"value":"speedup"}],"signature":"actionStart(speedup)","slotKey":"-2"},"key":"33"},{"code":"Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)","filter":{"args":[{"value":"speedup"}],"signature":"actionLoop(speedup)","slotKey":"-2"},"key":"34"},{"code":"if atmo_mode == 1 then\n    atmo_mode = 0\n    atmo_string = atmo_buffer\nelse\n    atmo_mode = 1\n    atmo_string = atmo_buffer2\nend  \nif classicHUD == 1 then\n    system.print((\"AtmoMode: \"..atmo_mode))\nend\n\n","filter":{"args":[{"value":"gear"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"35"},{"code":"if brake_toggle == 0 then\n    brakeInput = 0\n    brake_string = \"\"\nend","filter":{"args":[{"value":"brake"}],"signature":"actionStop(action)","slotKey":"-2"},"key":"36"},{"code":"if statistic_show ==1 then\n    statistic_show = 0\n    veloc_statistics_string = \"\"\n\taccel_statistics_string = \"\"\n\tgraph_base_string = \"\"\nelse \n    statistic_show = 1\nend","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"37"},{"code":"if display_UI == 1 then \n    unit.stopTimer(\"UI\")\n    system.showScreen(0)\n    display_UI = 0\nelse\n    display_UI = 1\n    unit.setTimer(\"UI\", 0.05)\n    system.showScreen(1)\nend","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"38"},{"code":"system.print(string.format(\"Press %s for atmo only mode. The orange line at the top will disappear while space engines are disabled.\", system.getActionKeyName(\"gear\")))\nsystem.print(string.format(\"%s enables and disables the statistics graph.\", system.getActionKeyName(\"option1\")))\nsystem.print(string.format(\"%s enables and disables the whole HUD.\", system.getActionKeyName(\"option2\")))\nsystem.print(\"Enter 'info' to get additional information about the script.\")","filter":{"args":[{"value":"help"}],"signature":"inputText(text)","slotKey":"-2"},"key":"39"},{"code":"system.print(\"The tank levels displayed are averages across all tanks with one of the following names: AtmoMain, SpaceMain, SpaceUtil.\")\nsystem.print(\"The build helper is not intended to be used in day-to-day flying, hence why it overlaps.\")\nsystem.print(\"Try out the parameters for different atmo-only colors for the top lines. You can also move the statistics graph.\")\nsystem.print(\"In order to remove DRM, contact ZarTaen#6409. You should be in a shared DU discord such as the main DU discord, otherwise the friend request will be ignored.\")","filter":{"args":[{"value":"info"}],"signature":"inputText(text)","slotKey":"-2"},"key":"40"}],"methods":[],"events":[]}
